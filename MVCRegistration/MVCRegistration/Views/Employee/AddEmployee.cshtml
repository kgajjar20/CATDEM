@model MVCRegistration.Models.EmployeeViewModel

@{
    ViewBag.Title = "AddEmployee";
}

<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.2.1/jquery.min.js"></script>


<h2>Add Employee</h2>

@using (Html.BeginForm()) 
{
    @Html.AntiForgeryToken()
    
    <div class="form-horizontal">
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">
            @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Address, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.TextAreaFor(model => model.Address, new { @class = "form-control" ,cols="5"})
                @Html.ValidationMessageFor(model => model.Address, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Email, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Email, new { htmlAttributes = new { @class = "form-control", @type = "email" } })
                @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.Label("Country", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownListFor(model => model.CountryId, Model.lstCountry,"--Select Country--",new { @class = "form-control Country" } )
                @Html.ValidationMessageFor(model => model.CountryId, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.Label("State", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownListFor(model => model.StateId,Model.lstState,"--Select State--", new { @class = "form-control State" } )
                @Html.ValidationMessageFor(model => model.StateId, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.Label("City", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownListFor(model => model.CityId, Model.lstCity,"--Select City--",new { @class = "form-control City" })
                @Html.ValidationMessageFor(model => model.CityId, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Gender, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.RadioButtonFor(model => model.Gender, "Male", "Male") <span> Male </span>
                @Html.RadioButtonFor(model => model.Gender, "Female", "Female") <span> Female </span>
                @Html.ValidationMessageFor(model => model.Gender, "", new { @class = "text-danger" })
            </div>
        </div>



        <div class="form-group">
            @Html.Label("Birth Date", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.BirthDate, new { htmlAttributes = new { @class = "form-control"  ,type="date"} })
                @Html.ValidationMessageFor(model => model.BirthDate, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Create" class="btn btn-default" />
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}

<script>
    $('.Country').change(function () {
        debugger;
        var countryId = $(this).val();
        if (countryId != null && countryId!="") {
            $.ajax({
                url: '@Url.Action("GetStateListByCountryId", "Employee")',
                type: "GET",
                data: { countryId: countryId },
                success: function (data) {
                    debugger;
                    $(".State").html('');
                    $(".State").append('<option value="0">--Select State--</option>');

                    $.each(data, function (id, name) {
                        $(".State").append('<option value="'
                            + name.StateId + '">'
                            + name.StateName + '</option>');
                    });
                },
                error: function () {
                    alert('Failed to retrieve states.');
                    states.hide();
                }
            });
        }
        else
        {
            $(".State").html('');
            $(".State").append('<option value="0">--Select State--</option>');

            $(".City").html('');
            $(".City").append('<option value="0">--Select City--</option>');

        }


      if (Make_Model1=="Make") {
        $("#opModel").prop("disabled", true);
        $("#opYear").prop("disabled", true);
        $("#opCat").prop("disabled", true);
        $("#opSubCat").prop("disabled", true);
        $("#txt2").prop("disabled", true);
        $("#opSearchCarPartListtab").prop("disabled", true);
      }
      else {
        $("#opModel").prop("disabled", false);
        $("#opYear").prop("disabled", false);
        $("#opCat").prop("disabled", false);
        $("#opSubCat").prop("disabled", false);
        $("#txt2").prop("disabled", false);
        $("#opSearchCarPartListtab").prop("disabled", false);
      }
    })
</script>

<script>
    $('.State').change(function () {
        debugger;
        var stateId = $(this).val();
        if (stateId != null && stateId != "") {
            $.ajax({
                url: '@Url.Action("GetCityListByStateId", "Employee")',
                type: "GET",
                data: { stateId: stateId },
                success: function (data) {
                    debugger;
                    $(".City").html('');
                    $(".City").append('<option value="0">--Select City--</option>');

                    $.each(data, function (id, name) {
                        $(".City").append('<option value="'
                            + name.CityId + '">'
                            + name.CityName + '</option>');
                    });
                },
                error: function () {
                    alert('Failed to retrieve states.');
                    states.hide();
                }
            });
        }
        else
        {
            $(".City").html('');
            $(".City").append('<option value="0">--Select City--</option>');

        }


      if (Make_Model1=="Make") {
        $("#opModel").prop("disabled", true);
        $("#opYear").prop("disabled", true);
        $("#opCat").prop("disabled", true);
        $("#opSubCat").prop("disabled", true);
        $("#txt2").prop("disabled", true);
        $("#opSearchCarPartListtab").prop("disabled", true);
      }
      else {
        $("#opModel").prop("disabled", false);
        $("#opYear").prop("disabled", false);
        $("#opCat").prop("disabled", false);
        $("#opSubCat").prop("disabled", false);
        $("#txt2").prop("disabled", false);
        $("#opSearchCarPartListtab").prop("disabled", false);
      }
    })
</script>